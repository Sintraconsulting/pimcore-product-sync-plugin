<?php

namespace SintraPimcoreBundle\Services\Shopify;

use SintraPimcoreBundle\Services\BaseEcommerceService;

abstract class BaseShopifyService extends BaseEcommerceService {
    
    /**
     * Specific mapping for Shopify Product export
     * It builds the API array for communcation with shopify product endpoint
     * @param $shopifyApi
     * @param $fieldMap
     * @param $fieldsDepth
     * @param $language
     * @param $dataSource
     * @param TargetServer $server
     * @return array
     * @throws \Exception
     */
    protected function mapServerMultipleField ($shopifyApi, $fieldMap, $fieldsDepth, $language, $dataSource = null, TargetServer $server = null) {
        // End of recursion
        if(count($fieldsDepth) == 1) {
            /** @var Product\Listing $dataSource */
            if ( method_exists($dataSource, 'current') ) {
                $dataSource = $dataSource->getObjects()[0];
            }
            $fieldValue = $this->getObjectField($fieldMap, $language, $dataSource);
            $apiField = $fieldsDepth[0];
            if($fieldValue instanceof \Pimcore\Model\DataObject\Data\QuantityValue && $apiField == 'weight'){
                return $this->mapServerField($shopifyApi, $fieldValue->getValue(), $apiField) + $this->mapServerField([], $fieldValue->getUnit()->getAbbreviation(), 'weight_unit');
            }
            return $this->mapServerField($shopifyApi, $fieldValue, $apiField);
        }
        $parentDepth = array_shift($fieldsDepth);

        //Recursion inside variants
        if ($parentDepth == 'variants' && $dataSource) {
            $i = 0;
            foreach ($dataSource as $dataObject) {
                $serverInfo = $this->getServerObjectInfo($dataObject, $server);
                if (!$serverInfo->getSync()) {
                    $shopifyApi[$parentDepth][$i] = $this->mapServerMultipleField($shopifyApi[$parentDepth][$i],
                            $fieldMap, $fieldsDepth, $language, $dataObject);
                }
                $i++;
            }
            return $shopifyApi;
        }

        /**
         * End of recursion with metafields
         * @see https://help.shopify.com/en/api/reference/metafield
         * TODO: could be exported as a self sustainable function, but for now it's not necessary
         */
        if ($parentDepth == 'metafields') {
            if ( method_exists($dataSource, 'current') ) {
                $dataSource = $dataSource->getObjects()[0];
            }
            $fieldValue = $this->getObjectField($fieldMap, $language, $dataSource);
            $apiField = $fieldsDepth[0];
            $fieldType = is_integer($fieldValue) ? 'integer' : 'string';
            $customValue = [
                    'key' => $apiField,
                    'value' => $fieldType === 'string' ? (string)$fieldValue : $fieldValue,
                    'value_type' => $fieldType,
                    // Namespace is intentional like this so we know it was generated by SintraPimcoreBundle
                    'namespace' => 'SintraPimcore',
            ];
            $shopifyApi[$parentDepth][] = $customValue;
            return $shopifyApi;
        }

        /**
         * Recursion level > 1
         * For now, on shopify there is no nested field mapping except metafields & variants
         * It should never reach this point with shopify.
         * TODO: image implementation should be developed in the future here for field mapping
         */
        return $this->mapServerMultipleField($shopifyApi[$parentDepth], $fieldMap, $fieldsDepth, $language, $dataSource, $server);
    }
    
}